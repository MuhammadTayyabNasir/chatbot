import os

# The root directory for the project structure
root_dir = 'lib'

# A dictionary defining the structure.
# Keys are the subdirectory paths relative to 'lib'.
# Values are lists of files to be created within them.
structure = {
    "core": [
        "constants.dart",
        "date_formatter.dart"
    ],
    "data/models": [
        "message.dart",
        "off_day.dart",
        "past_response.dart",
        "question.dart",
        "weekend_day.dart"
    ],
    "data/services": [
        "api_service.dart",
        "mock_socket_service.dart"
    ],
    "logic": [
        "enriched_question_logic.dart"
    ],
    "presentation/providers": [
        "chat_provider.dart"
    ],
    "presentation/screens": [
        "chat_screen.dart"
    ],
    "presentation/widgets": [
        "chat_input_bar.dart",
        "chat_message_bubble.dart",
        "date_separator.dart"
    ]
}

# A list of files to be created directly under the root 'lib' directory
root_files = [
    "main.dart"
]

def create_project_structure():
    """
    Creates the directories and files as defined in the global structures.
    """
    print(f"Creating project structure inside the '{root_dir}' directory...")

    # 1. Ensure the main 'lib' directory exists
    os.makedirs(root_dir, exist_ok=True)
    print(f"Ensured root directory exists: {root_dir}/")

    # 2. Create all subdirectories and the files within them
    for subdir, files in structure.items():
        # Construct the full path for the subdirectory (e.g., 'lib/data/models')
        # os.path.join handles nesting correctly (e.g., 'data', 'models')
        dir_path = os.path.join(root_dir, *subdir.split('/'))
        
        # os.makedirs creates all intermediate directories (e.g., 'data' then 'models')
        os.makedirs(dir_path, exist_ok=True)
        print(f"  └── Created directory: {dir_path}/")

        # Create each file within the subdirectory
        for file_name in files:
            file_path = os.path.join(dir_path, file_name)
            # 'w' mode creates an empty file if it doesn't exist.
            with open(file_path, 'w') as f:
                # You could add default content here, e.g.:
                # f.write(f'// File: {file_name}\n// Generated by setup script.\n\n')
                pass
            print(f"      ├── Created file: {file_path}")

    # 3. Create the files directly under the 'lib' directory
    for file_name in root_files:
        file_path = os.path.join(root_dir, file_name)
        with open(file_path, 'w') as f:
            pass
        print(f"  └── Created file: {file_path}")

    print("\n✅ Project structure created successfully!")


if __name__ == "__main__":
    create_project_structure()